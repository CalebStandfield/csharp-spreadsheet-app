@namespace GUI.Client.Pages
@page "/sheets"
@using System.Diagnostics
@using Microsoft.JSInterop
@rendermode InteractiveServer
@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime

<PageTitle>Spreadsheet</PageTitle>

<div class = "left-right">
    <!-- Left side (Text areas) -->
    <div class="line-style">
        <textarea class = "cell-field" readonly>Cell: @_selectedCell</textarea>
        <textarea class = "value-field" readonly>Value: @_selectedCellValue</textarea>
    </div>

    <!-- Right side (Buttons) -->
    <div class="button-group">
        <button @onclick = "Undo">Back</button>
        <button @onclick = "Redo">Forward</button>
        <button @onclick = "ClearSpreadsheet">Clear</button>
    </div>
</div>

<div class="input-row">
    <span class = "input-label" readonly>Input --></span>
    <input class = "input-field" @onchange = "AddToStack" @oninput = "ChangeCellContents" value = "@_selectedCellInput"  @ref = "_inputElement"/>
</div>

<br/>
<br/>

<div>
    <div class="table-container">
        <div class="scrollable">
            <table class="table table-bordered">
                <thead>
                <tr class="fixed-header">
                    <th scope="col">&nbsp;</th>
                    @for (var col = 0; col < Cols; col++)
                    {
                    <th scope="col">@Alphabet[col]</th>
                    }
                </tr>
                </thead>

                <tbody>
                @for (var row = 0; row < Rows; row++)
                {
                <tr style="padding:0 !important;">
                    <th style="padding:0 !important;" scope="row" class="fixed-column">@(row + 1)</th>
                    @for (var col = 0; col < Cols; col++)
                    {
                    var r = row;
                    var c = col;

                    <td @onclick="() => CellClicked(r, c)" class="spreadsheet-cell">
                        <p class="spreadcell"> @CellsBackingStore[r, c] </p>
                    </td>
                    }
                </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
</div>

<br/>

<span>
    <button class="btn btn-primary" @onclick="SaveFile">Save</button>
    <label>Load</label><InputFile type="file" OnChange="HandleFileChooser"/>
</span>

<style>
    .spreadsheet-cell {
        padding: 0 !important;
        white-space: normal;
        word-wrap: break-word;
        word-break: break-all;
    }

    .spreadcell {
        width: 150px;
        height: 55px;
    }

    .table-container {
        overflow-x: auto;
    }

    .fixed-header {
        position: sticky;
        top: 0;
        z-index: 1;
        background-color: #ffffff !important;
    }

    .fixed-column {
        position: sticky;
        left: 0;
        z-index: 1;
        background-color: #ffffff !important;
    }

    .scrollable {
        white-space: nowrap;
        width: 1000px;
        height: 500px;
        margin: -1px;
    }

    .input-row {
        display: flex;
        gap: 10px;
        margin-top: 10px;
    }

    .cell-field {
        resize: none;
        width: 85px;
        height: 30px;
        padding: 5px;
        box-sizing: border-box;
        overflow: hidden;
    }

    .value-field {
        resize: none;
        width: 600px;
        height: 30px;
        padding: 5px;
        box-sizing: border-box;
        overflow: hidden;
    }

    .input-label {
        text-align: center;
        resize: none;
        width: 85px;
        height: 30px;
        padding: 5px;
        box-sizing: border-box;
        overflow: hidden;
    }

    .input-field {
        width: 600px;
        height: 30px;
        padding: 5px;
        box-sizing: border-box;
        overflow: hidden;
    }
    
    .left-right {
        display: flex;
        justify-content: space-between;
        align-items: center;
        width: 100%;
        padding: 0 10px;
        box-sizing: border-box;
        }

    .line-style {
        display: flex;
        flex: 1;
        gap: 10px;
        justify-content: flex-start;
    }

    .button-group {
        display: flex;
        gap: 10px;
        justify-content: flex-end;
        flex-shrink: 0;
    }
</style>

<script type="text/javascript">
    function focusElement(id) {
        console.log(`looking for: ${id}`);
        var element = document.getElementById(id);
        if (element) {
            console.log(`focusing element: ${id} ${element}`)
            element.focus();
        }
    }

    window.addKeyPressListener = function (dotNetObject) {
        console.log("registering key press event handler");
        document.addEventListener('keydown', function (event) {
            console.log(`got key: ${event.key}`);
            if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(event.key)) {
                event.preventDefault(); // Prevent arrow keys from scrolling
            }
            dotNetObject.invokeMethodAsync('HandleKeyPress', event.key);
        });
    };

    function downloadFile(fileName, fileContent) {
        console.log(`download file ${fileName}`);
        // Create a blob with the file content
        const blob = new Blob([fileContent], {type: "text/plain"});

        // Create a link element
        const a = document.createElement("a");
        a.href = URL.createObjectURL(blob);
        a.download = fileName;

        // Append the anchor element to the body
        document.body.appendChild(a);

        // Click the link to trigger download
        a.click();

        // Remove the anchor element from the DOM
        document.body.removeChild(a);
    }

</script>